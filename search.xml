<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dockerfile</title>
      <link href="/2022/10/20/Dockerfile/"/>
      <url>/2022/10/20/Dockerfile/</url>
      
        <content type="html"><![CDATA[<pre><code class="Dockerfile"># 定义基础镜像版本ARG GO_VERSION=1.17.13ARG ALPINE_VERSION=3.16# 构建运行环境FROM alpine:$&#123;ALPINE_VERSION&#125; AS base# 换源，同步时区RUN sed -i &#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#39; /etc/apk/repositoriesRUN apk update &amp;&amp; apk add --no-cache tzdata \    &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \    &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone# 构建编译时环境FROM golang:$&#123;GO_VERSION&#125;-alpine$&#123;ALPINE_VERSION&#125; AS build# 设置go envENV GOPATH=&quot;/go&quot; \    GO111MODULE=&quot;on&quot; \    GOPROXY=&quot;https://goproxy.cn&quot; \    CGO_ENABLED=&quot;0&quot;# 换源，安装编译依赖RUN sed -i &#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#39; /etc/apk/repositoriesRUN apk update &amp;&amp; apk add --no-cache \    git \    makeCOPY . /go/src/github.com/Ning-Qing/templeWORKDIR /go/src/github.com/Ning-Qing/templeRUN make build# 拷贝二进制文件FROM baseWORKDIR /fabric-relayerCOPY --from=build /go/src/github.com/Ning-Qing/temple/build/fabric-relayer ./templeENTRYPOINT [&quot;./temple&quot;]# 使用CMD传参CMD [&quot;-h&quot;]</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile</title>
      <link href="/2022/10/20/Makefile/"/>
      <url>/2022/10/20/Makefile/</url>
      
        <content type="html"><![CDATA[<pre><code class="Makefile">DOCKER_NS ?= github.com/Ning-QingPKG_NS ?= github.com/NingQingPKG_NAME ?= templePKG_VERSION ?= 1.0.0GO_VERSION ?= 1.17.13ALPINE_VERSION ?= 3.16SUPPORTED_PLATFORMS = linux/arm64,linux/amd64ARCH := $(shell arch)OS := $(shell uname -s)ifeq ($(ARCH),x86_64)    ARCH=amd64else ifeq ($(ARCH),arm64)    ARCH=arm64else     exit $$?endififeq ($(OS),Linux)    OS=linuxelse    exit $$?endifbuild:    @echo &quot;Building $(PKG_NAME)...&quot;    @go mod tidy &amp;&amp; go build -o ./build/$(PKG_NAME) \        -ldflags &quot;-X &#39;main.application=$(PKG_NAME)&#39; \                -X &#39;main.version=$(PKG_VERSION)&#39;&quot; \        .     @echo &quot;see ./build/$(PKG_NAME)&quot;    run:    @go mod tidy &amp;&amp; go run .image:    @echo &quot;Building $(PKG_NAME) docker image - $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION)&quot;    @docker build --no-cache -f Dockerfile \        --build-arg GO_VERSION=$(GO_VERSION) \        --build-arg ALPINE_VERSION=$(ALPINE_VERSION) \        -t $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION) .    @docker tag $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION) $(PKG_NAME):latest    @echo &quot;scan image $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION) or $(PKG_NAME):latest&quot;    @echo &quot;maybe you want psuh image to $(DOCKER_NS),you can make push&quot;push:    @echo &quot;push image $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION) to $(DOCKER_NS)&quot;    @docker push $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION)image-relase:    @docker buildx create --use --name $(PKG_NAME)-builder    @echo &quot;Building $(PKG_NAME) docker image relase - $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION)&quot;    @docker buildx build \        --platform $(SUPPORTED_PLATFORMS) \        --build-arg GO_VERSION=$(GO_VERSION) \        --build-arg ALPINE_VERSION=$(ALPINE_VERSION) \        -f Dockerfile -t $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION) . --push    @docker tag $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION) $(PKG_NAME):latest    @echo &quot;you can go to $(DOCKER_NS) see image $(DOCKER_NS)/$(PKG_NAME):$(PKG_VERSION)&quot;    @docker buildx rm $(PKG_NAME)-builderclean:    @rm -rf build.PHONY: build run image image-relase</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>options模式</title>
      <link href="/2022/10/20/options%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/10/20/options%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<pre><code class="golang">const (    DefaultHost = &quot;127.0.0.1&quot;    DefaultPort = &quot;8080&quot;)type Option func(c *Client)type Client struct &#123;    Host string    Port string&#125;func NewClient(options ...Option) *Client &#123;    c := &amp;Client&#123;        Host: DefaultHost,        Port: DefaultPort,    &#125;    for _, option := range options &#123;        option(c)    &#125;    return c&#125;func WitchHost(host string) Option &#123;    return func(c *Client) &#123;        c.Host = host    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除桌面快捷图标</title>
      <link href="/2022/10/20/%E5%8E%BB%E9%99%A4%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E5%9B%BE%E6%A0%87/"/>
      <url>/2022/10/20/%E5%8E%BB%E9%99%A4%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h2 id="去掉小箭头"><a href="#去掉小箭头" class="headerlink" title="去掉小箭头"></a>去掉小箭头</h2><pre><code class="bat">reg add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons&quot; /v 29 /d &quot;%systemroot%\system32\imageres.dll,197&quot; /t reg_sz /ftaskkill /f /im explorer.exeattrib -s -r -h &quot;%userprofile%\AppData\Local\iconcache.db&quot;del &quot;%userprofile%\AppData\Local\iconcache.db&quot; /f /qstart explorerpause</code></pre><p>复制上面的代码。新建一个文本文件。粘贴后另存为.bat文件，然后以管理员身份打开。<br>ok！</p><h2 id="恢复小箭头"><a href="#恢复小箭头" class="headerlink" title="恢复小箭头"></a>恢复小箭头</h2><pre><code class="bat">reg delete &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons&quot; /v 29 /ftaskkill /f /im explorer.exeattrib -s -r -h &quot;%userprofile%\AppData\Local\iconcache.db&quot;del &quot;%userprofile%\AppData\Local\iconcache.db&quot; /f /qstart explorerpause</code></pre><p>同理，将上述代码另存为.bat文件，管理员身份打开。就可恢复小箭头了  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2022/10/20/helloworld/"/>
      <url>/2022/10/20/helloworld/</url>
      
        <content type="html"><![CDATA[<pre><code class="golang">    fmt.Println(&quot;Hello world!&quot;)</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
